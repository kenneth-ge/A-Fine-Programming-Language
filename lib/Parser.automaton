State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On main shift to state 58
-- On expr shift to state 59
## Reductions:

State 1:
## Known stack suffix:
## UNIT
## LR(1) items:
expr -> UNIT . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> UNIT

State 2:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> TRUE

State 3:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 57
## Reductions:

State 4:
## Known stack suffix:
## NEG
## LR(1) items:
expr -> NEG . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 56
## Reductions:

State 5:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 54
## Reductions:

State 6:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . IDENT ANNOTATION typexpr SET expr IN expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On IDENT shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## LET IDENT
## LR(1) items:
expr -> LET IDENT . ANNOTATION typexpr SET expr IN expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On ANNOTATION shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## LET IDENT ANNOTATION
## LR(1) items:
expr -> LET IDENT ANNOTATION . typexpr SET expr IN expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNITTYPE shift to state 9
-- On LPAREN shift to state 10
-- On INTTYPE shift to state 11
-- On BOOLTYPE shift to state 12
-- On typexpr shift to state 17
## Reductions:

State 9:
## Known stack suffix:
## UNITTYPE
## LR(1) items:
typexpr -> UNITTYPE . [ TYPEARROW SET RPAREN ARROW ]
## Transitions:
## Reductions:
-- On TYPEARROW SET RPAREN ARROW
--   reduce production typexpr -> UNITTYPE

State 10:
## Known stack suffix:
## LPAREN
## LR(1) items:
typexpr -> LPAREN . typexpr RPAREN [ TYPEARROW SET RPAREN ARROW ]
## Transitions:
-- On UNITTYPE shift to state 9
-- On LPAREN shift to state 10
-- On INTTYPE shift to state 11
-- On BOOLTYPE shift to state 12
-- On typexpr shift to state 13
## Reductions:

State 11:
## Known stack suffix:
## INTTYPE
## LR(1) items:
typexpr -> INTTYPE . [ TYPEARROW SET RPAREN ARROW ]
## Transitions:
## Reductions:
-- On TYPEARROW SET RPAREN ARROW
--   reduce production typexpr -> INTTYPE

State 12:
## Known stack suffix:
## BOOLTYPE
## LR(1) items:
typexpr -> BOOLTYPE . [ TYPEARROW SET RPAREN ARROW ]
## Transitions:
## Reductions:
-- On TYPEARROW SET RPAREN ARROW
--   reduce production typexpr -> BOOLTYPE

State 13:
## Known stack suffix:
## LPAREN typexpr
## LR(1) items:
typexpr -> typexpr . TYPEARROW typexpr [ TYPEARROW RPAREN ]
typexpr -> LPAREN typexpr . RPAREN [ TYPEARROW SET RPAREN ARROW ]
## Transitions:
-- On TYPEARROW shift to state 14
-- On RPAREN shift to state 16
## Reductions:

State 14:
## Known stack suffix:
## typexpr TYPEARROW
## LR(1) items:
typexpr -> typexpr TYPEARROW . typexpr [ TYPEARROW SET RPAREN ARROW ]
## Transitions:
-- On UNITTYPE shift to state 9
-- On LPAREN shift to state 10
-- On INTTYPE shift to state 11
-- On BOOLTYPE shift to state 12
-- On typexpr shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## typexpr TYPEARROW typexpr
## LR(1) items:
typexpr -> typexpr . TYPEARROW typexpr [ TYPEARROW SET RPAREN ARROW ]
typexpr -> typexpr TYPEARROW typexpr . [ TYPEARROW SET RPAREN ARROW ]
## Transitions:
-- On TYPEARROW shift to state 14
## Reductions:
-- On TYPEARROW SET RPAREN ARROW
--   reduce production typexpr -> typexpr TYPEARROW typexpr
** Conflict on TYPEARROW

State 16:
## Known stack suffix:
## LPAREN typexpr RPAREN
## LR(1) items:
typexpr -> LPAREN typexpr RPAREN . [ TYPEARROW SET RPAREN ARROW ]
## Transitions:
## Reductions:
-- On TYPEARROW SET RPAREN ARROW
--   reduce production typexpr -> LPAREN typexpr RPAREN

State 17:
## Known stack suffix:
## LET IDENT ANNOTATION typexpr
## LR(1) items:
expr -> LET IDENT ANNOTATION typexpr . SET expr IN expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
typexpr -> typexpr . TYPEARROW typexpr [ TYPEARROW SET ]
## Transitions:
-- On TYPEARROW shift to state 14
-- On SET shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## LET IDENT ANNOTATION typexpr SET
## LR(1) items:
expr -> LET IDENT ANNOTATION typexpr SET . expr IN expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 51
## Reductions:

State 19:
## Known stack suffix:
## LAMBDA
## LR(1) items:
expr -> LAMBDA . IDENT ANNOTATION typexpr ARROW expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On IDENT shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## LAMBDA IDENT
## LR(1) items:
expr -> LAMBDA IDENT . ANNOTATION typexpr ARROW expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On ANNOTATION shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## LAMBDA IDENT ANNOTATION
## LR(1) items:
expr -> LAMBDA IDENT ANNOTATION . typexpr ARROW expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNITTYPE shift to state 9
-- On LPAREN shift to state 10
-- On INTTYPE shift to state 11
-- On BOOLTYPE shift to state 12
-- On typexpr shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## LAMBDA IDENT ANNOTATION typexpr
## LR(1) items:
expr -> LAMBDA IDENT ANNOTATION typexpr . ARROW expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
typexpr -> typexpr . TYPEARROW typexpr [ TYPEARROW ARROW ]
## Transitions:
-- On TYPEARROW shift to state 14
-- On ARROW shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## LAMBDA IDENT ANNOTATION typexpr ARROW
## LR(1) items:
expr -> LAMBDA IDENT ANNOTATION typexpr ARROW . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 50
## Reductions:

State 24:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> INT

State 25:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN expr ELSE expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 45
## Reductions:

State 26:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> IDENT

State 27:
## Known stack suffix:
## FIX
## LR(1) items:
expr -> FIX . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 29
## Reductions:

State 28:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> FALSE

State 29:
## Known stack suffix:
## FIX expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> FIX expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> FIX expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 30:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr TIMES expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> expr TIMES expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 32:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr PLUS expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> expr PLUS expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 34:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr MINUS expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> expr MINUS expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 36:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr LESS expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> expr LESS expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 38:
## Known stack suffix:
## expr GREATER
## LR(1) items:
expr -> expr GREATER . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expr GREATER expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr GREATER expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> expr GREATER expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 40:
## Known stack suffix:
## expr EQ
## LR(1) items:
expr -> expr EQ . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr EQ expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> expr EQ expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 42:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr DIV expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> expr DIV expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 44:
## Known stack suffix:
## expr expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> expr expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 45:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> IF expr . THEN expr ELSE expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On THEN shift to state 46
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:

State 46:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . expr ELSE expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## IF expr THEN expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ ELSE DIV ]
expr -> IF expr THEN expr . ELSE expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On ELSE shift to state 48
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:

State 48:
## Known stack suffix:
## IF expr THEN expr ELSE
## LR(1) items:
expr -> IF expr THEN expr ELSE . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## IF expr THEN expr ELSE expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> IF expr THEN expr ELSE expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> IF expr THEN expr ELSE expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 50:
## Known stack suffix:
## LAMBDA IDENT ANNOTATION typexpr ARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> LAMBDA IDENT ANNOTATION typexpr ARROW expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> LAMBDA IDENT ANNOTATION typexpr ARROW expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 51:
## Known stack suffix:
## LET IDENT ANNOTATION typexpr SET expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> LET IDENT ANNOTATION typexpr SET expr . IN expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IN shift to state 52
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:

State 52:
## Known stack suffix:
## LET IDENT ANNOTATION typexpr SET expr IN
## LR(1) items:
expr -> LET IDENT ANNOTATION typexpr SET expr IN . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On expr shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LET IDENT ANNOTATION typexpr SET expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> LET IDENT ANNOTATION typexpr SET expr IN expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> LET IDENT ANNOTATION typexpr SET expr IN expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 54:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> expr . expr [ UNIT TRUE TIMES RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV ]
expr -> LPAREN expr . RPAREN [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On RPAREN shift to state 55
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:

State 55:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> LPAREN expr RPAREN

State 56:
## Known stack suffix:
## NEG expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> NEG expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> NEG expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 57:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> NOT expr . [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
expr -> expr . expr [ UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:
-- On UNIT TRUE TIMES THEN RPAREN PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IN IF IDENT GREATER FIX FALSE EQ EOF ELSE DIV
--   reduce production expr -> NOT expr
** Conflict on UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ DIV

State 58:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

State 59:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ EOF DIV ]
expr -> expr . MINUS expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ EOF DIV ]
expr -> expr . TIMES expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ EOF DIV ]
expr -> expr . DIV expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ EOF DIV ]
expr -> expr . EQ expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ EOF DIV ]
expr -> expr . LESS expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ EOF DIV ]
expr -> expr . GREATER expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ EOF DIV ]
expr -> expr . expr [ UNIT TRUE TIMES PLUS NOT NEG MINUS LPAREN LET LESS LAMBDA INT IF IDENT GREATER FIX FALSE EQ EOF DIV ]
main -> expr . EOF [ # ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 30
-- On PLUS shift to state 32
-- On NOT shift to state 3
-- On NEG shift to state 4
-- On MINUS shift to state 34
-- On LPAREN shift to state 5
-- On LET shift to state 6
-- On LESS shift to state 36
-- On LAMBDA shift to state 19
-- On INT shift to state 24
-- On IF shift to state 25
-- On IDENT shift to state 26
-- On GREATER shift to state 38
-- On FIX shift to state 27
-- On FALSE shift to state 28
-- On EQ shift to state 40
-- On EOF shift to state 60
-- On DIV shift to state 42
-- On expr shift to state 44
## Reductions:

State 60:
## Known stack suffix:
## expr EOF
## LR(1) items:
main -> expr EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> expr EOF

