{
  open Parser (* The parser module generated by Menhir *)
}

rule token = parse
  | [' ' '\t' '\n' '\r'] { token lexbuf } (* Ignore whitespace *)
  | "if" { IF }
  | "then" { THEN }
  | "else" { ELSE }
  | "true" { TRUE }
  | "false" { FALSE }
  | "()" { UNIT }
  | ['a'-'z' 'A'-'Z'] ['a'-'z' 'A'-'Z' '0'-'9' '_']* as id { IDENT id }
  | ['0'-'9']+ as num { INT (int_of_string num) }
  | '+' { PLUS }
  | '-' { MINUS }
  | '~' { NEG }
  | '*' { TIMES }
  | '/' { DIV }
  | '!' { NOT }
  | '=' { EQ }
  | '<' { LESS }
  | '>' { GREATER }
  | '(' { LPAREN }
  | ')' { RPAREN }
  | ':' { ANNOTATION }
  | "=>" { ARROW }
  | "fn" { LAMBDA }
  | ';' { SEMI }
  | "in" { IN }
  | '.' { DOT }
  | "fix" { FIX }
  | "let" { LET }
  | ":=" { SET }
  (* Type things *)
  | "bool" { BOOLTYPE }
  | "int" { INTTYPE }
  | "unit" { UNITTYPE }
  | "->" { TYPEARROW }
  (* Modifier things *)
  | "affine" {AFFINE}
  | "atmost" {ATMOST}
  | "atleast" {ATLEAST}
  | eof { EOF }
  | _ { failwith "Unknown character" }

{
  let read lexbuf = token lexbuf
}
